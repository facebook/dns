/*
Copyright (c) Meta Platforms, Inc. and affiliates.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package dnsdata

import (
	"bytes"
	"fmt"
	"net"
	"reflect"
	"strconv"
	"testing"

	"github.com/stretchr/testify/require"
)

type codecTest struct {
	in      []byte
	outText []byte
	out     []MapRecord
	outV2   []MapRecord
}

const testSerial uint32 = (99 << 24) | (88 << 16) | (77 << 8) | 66 // something catching the eye in dec dumps

var codectests = []codecTest{
	{
		in:      []byte("%a1,2001:db8::/32,m2"),
		outText: []byte("%\\141\\061,2001:db8::/32,\\155\\062"),
		out: []MapRecord{
			{
				Key: []byte{
					0x0, 0x25, // "\000%"
					0x6d, 0x32, // "m2"
					0x20, 0x1, 0xd, 0xb8, 0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // ip("2001:db8::")
					0x20, // prefixlen(32)
				},
				Value: []byte{0x61, 0x31}, // "a1"
			},
		},
	},
	{
		in:      []byte("%\\141b:192.168.1.0/24:c\001"),
		outText: []byte("%\\141\\142,192.168.1.0/24,\\143\\001"),
		out: []MapRecord{
			{
				Key:   []byte{0, 37, 99, 1, 192, 168, 1},
				Value: []byte{97, 98},
			},
			{
				Key:   []byte{0, 37, 99, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 192, 168, 1, 0, 120},
				Value: []byte{97, 98},
			},
		},
	},
	{
		in:      []byte("%ab,192.168.1.0/24,mn"),
		outText: []byte("%\\141\\142,192.168.1.0/24,\\155\\156"),
		out: []MapRecord{
			{Key: []byte{0, 37, 109, 110, 192, 168, 1}, Value: []byte{97, 98}},
			{Key: []byte{0, 37, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 192, 168, 1, 0, 120}, Value: []byte{97, 98}},
		},
	},
	{
		in:      []byte("%ab,192.168.1.0/24"),
		outText: []byte("%\\141\\142,192.168.1.0/24,\\000\\000"),
		out: []MapRecord{
			{Key: []byte{0, 37, 0, 0, 192, 168, 1}, Value: []byte{97, 98}},
			{Key: []byte{0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 192, 168, 1, 0, 120}, Value: []byte{97, 98}},
		},
	},
	{
		in:      []byte("%\\000\\052,197.241.0.0/23,c\\000"),
		outText: []byte("%\\000\\052,197.241.0.0/23,\\143\\000"),
		out: []MapRecord{
			{Key: []byte{0, 37, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 197, 241, 0, 0, 119}, Value: []byte{0, 42}},
		},
	},
	{
		in:      []byte("%\\000\\020,66.220.145.174,i\\000"),
		outText: []byte("%\\000\\020,66.220.145.174/32,\\151\\000"),
		out: []MapRecord{
			{Key: []byte{0, 37, 105, 0, 66, 220, 145, 174}, Value: []byte{0, 16}},
			{Key: []byte{0, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 66, 220, 145, 174, 128}, Value: []byte{0, 16}},
		},
	},
	{
		in:      []byte("%\\000\\013,,i\\000"),
		outText: []byte("%\\000\\013,0.0.0.0/0,\\151\\000"),
		out: []MapRecord{
			{Key: []byte{0, 37, 105, 0}, Value: []byte{0, 11}},
			{Key: []byte{0, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 96}, Value: []byte{0, 11}},
		},
	},
	{
		in:      []byte("Z\\164est.Com,a.ns.tes\\164.com,dns.\\164est.com,999,7200,1800,604800,120,120,,"),
		outText: []byte("Ztest.Com,a.ns.test.com,dns.test.com,999,7200,1800,604800,120,120,,"),
		out: []MapRecord{
			{
				Key: []byte{0, 0, 4, 116, 101, 115, 116, 3, 99, 111, 109, 0},
				Value: []byte{
					0, 6, 61, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 1,
					97, 2, 110, 115, 4, 116, 101, 115, 116, 3, 99, 111, 109, 0, 3, 100,
					110, 115, 4, 116, 101, 115, 116, 3, 99, 111, 109, 0, 0, 0, 3,
					231, 0, 0, 28, 32, 0, 0, 7, 8, 0, 9, 58, 128, 0, 0, 0,
					120,
				},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 4, 116, 101, 115, 116, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{
					0, 6, 61, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 1,
					97, 2, 110, 115, 4, 116, 101, 115, 116, 3, 99, 111, 109, 0, 3, 100,
					110, 115, 4, 116, 101, 115, 116, 3, 99, 111, 109, 0, 0, 0, 3,
					231, 0, 0, 28, 32, 0, 0, 7, 8, 0, 9, 58, 128, 0, 0, 0,
					120,
				},
			},
		},
	},
	{
		in:      []byte("Zt.org,a.ns.t.org,dns.t.org,111,7201,1801,604801,121,119,,"),
		outText: []byte("Zt.org,a.ns.t.org,dns.t.org,111,7201,1801,604801,121,119,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 1, 116, 3, 111, 114, 103, 0},
				Value: []byte{0, 6, 61, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 1, 116, 3, 111, 114, 103, 0, 3, 100, 110, 115, 1, 116, 3, 111, 114, 103, 0, 0, 0, 0, 111, 0, 0, 28, 33, 0, 0, 7, 9, 0, 9, 58, 129, 0, 0, 0, 121},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 111, 114, 103, 1, 116, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 6, 61, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 1, 116, 3, 111, 114, 103, 0, 3, 100, 110, 115, 1, 116, 3, 111, 114, 103, 0, 0, 0, 0, 111, 0, 0, 28, 33, 0, 0, 7, 9, 0, 9, 58, 129, 0, 0, 0, 121},
			},
		},
	},
	{
		in:      []byte("Zt.org,sec.ns.t.org,nsadm.t.org,222,7202,1802,604802,122,118,,a\\142"),
		outText: []byte("Zt.org,sec.ns.t.org,nsadm.t.org,222,7202,1802,604802,122,118,,\\141\\142"),
		out: []MapRecord{
			{
				Key:   []byte{97, 98, 1, 116, 3, 111, 114, 103, 0},
				Value: []byte{0, 6, 62, 97, 98, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 0, 3, 115, 101, 99, 2, 110, 115, 1, 116, 3, 111, 114, 103, 0, 5, 110, 115, 97, 100, 109, 1, 116, 3, 111, 114, 103, 0, 0, 0, 0, 222, 0, 0, 28, 34, 0, 0, 7, 10, 0, 9, 58, 130, 0, 0, 0, 122},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 111, 114, 103, 1, 116, 0, // inverted name
					97, 98, // location
				},
				Value: []byte{0, 6, 62, 97, 98, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 0, 3, 115, 101, 99, 2, 110, 115, 1, 116, 3, 111, 114, 103, 0, 5, 110, 115, 97, 100, 109, 1, 116, 3, 111, 114, 103, 0, 0, 0, 0, 222, 0, 0, 28, 34, 0, 0, 7, 10, 0, 9, 58, 130, 0, 0, 0, 122},
			},
		},
	},
	{
		in:      []byte("Zx.org,a.ns.x.org,dns.x.org,,,,,,,,"),
		outText: []byte("Zx.org,a.ns.x.org,dns.x.org,1666731330,16384,2048,1048576,2560,2560,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 1, 120, 3, 111, 114, 103, 0},
				Value: []byte{0, 6, 61, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 1, 120, 3, 111, 114, 103, 0, 3, 100, 110, 115, 1, 120, 3, 111, 114, 103, 0, 99, 88, 77, 66, 0, 0, 64, 0, 0, 0, 8, 0, 0, 16, 0, 0, 0, 0, 10, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 111, 114, 103, 1, 120, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 6, 61, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 1, 120, 3, 111, 114, 103, 0, 3, 100, 110, 115, 1, 120, 3, 111, 114, 103, 0, 99, 88, 77, 66, 0, 0, 64, 0, 0, 0, 8, 0, 0, 16, 0, 0, 0, 0, 10, 0},
			},
		},
	},
	{
		in:      []byte("Zlogdevice.io,a.ns.facebook.com,dns.facebook.com,22,14400,1800,604800,3600,3600"),
		outText: []byte("Zlogdevice.io,a.ns.facebook.com,dns.facebook.com,22,14400,1800,604800,3600,3600,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 9, 108, 111, 103, 100, 101, 118, 105, 99, 101, 2, 105, 111, 0},
				Value: []byte{0, 6, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0, 3, 100, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0, 0, 0, 0, 22, 0, 0, 56, 64, 0, 0, 7, 8, 0, 9, 58, 128, 0, 0, 14, 16},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					2, 105, 111, 9, 108, 111, 103, 100, 101, 118, 105, 99, 101, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 6, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0, 3, 100, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0, 0, 0, 0, 22, 0, 0, 56, 64, 0, 0, 7, 8, 0, 9, 58, 128, 0, 0, 14, 16},
			},
		},
	},
	{ // this one has trailing dots and repeating dots
		in:      []byte("Zlogdevice...io,a.ns..facebook.com.,dns.facebook.com..,22,14400,1800,604800,3600,3600"),
		outText: []byte("Zlogdevice.io,a.ns.facebook.com,dns.facebook.com,22,14400,1800,604800,3600,3600,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 9, 108, 111, 103, 100, 101, 118, 105, 99, 101, 2, 105, 111, 0},
				Value: []byte{0, 6, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0, 3, 100, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0, 0, 0, 0, 22, 0, 0, 56, 64, 0, 0, 7, 8, 0, 9, 58, 128, 0, 0, 14, 16},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					2, 105, 111, 9, 108, 111, 103, 100, 101, 118, 105, 99, 101, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 6, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0, 3, 100, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0, 0, 0, 0, 22, 0, 0, 56, 64, 0, 0, 7, 8, 0, 9, 58, 128, 0, 0, 14, 16},
			},
		},
	},
	{
		in:      []byte(".p\\141nic.mil:1.8.7.55:a"),
		outText: []byte(".panic.mil,1.8.7.55,a.ns.panic.mil,259200,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
				Value: []byte{0, 6, 61, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0, 10, 104, 111, 115, 116, 109, 97, 115, 116, 101, 114, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0, 99, 88, 77, 66, 0, 0, 64, 0, 0, 0, 8, 0, 0, 16, 0, 0, 0, 0, 10, 0},
			},
			{
				Key:   []byte{0, 0, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
				Value: []byte{0, 2, 61, 0, 3, 244, 128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
			{
				Key:   []byte{0, 0, 1, 97, 2, 110, 115, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
				Value: []byte{0, 1, 61, 0, 3, 244, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 8, 7, 55},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 6, 61, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0, 10, 104, 111, 115, 116, 109, 97, 115, 116, 101, 114, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0, 99, 88, 77, 66, 0, 0, 64, 0, 0, 0, 8, 0, 0, 16, 0, 0, 0, 0, 10, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 2, 61, 0, 3, 244, 128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 97, 2, 110, 115, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 2, 110, 115, 1, 97, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 1, 61, 0, 3, 244, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 8, 7, 55},
			},
		},
	},
	{
		in:      []byte("&s\\145rious.panic.mil,fd09:14f5:dead:beef:1::35,ns7.p\\141nic.mil"),
		outText: []byte("&serious.panic.mil,fd09:14f5:dead:beef:1::35,ns7.panic.mil,259200,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 7, 115, 101, 114, 105, 111, 117, 115, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
				Value: []byte{0, 2, 61, 0, 3, 244, 128, 0, 0, 0, 0, 0, 0, 0, 0, 3, 110, 115, 55, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
			{
				Key:   []byte{0, 0, 3, 110, 115, 55, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
				Value: []byte{0, 28, 61, 0, 3, 244, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 253, 9, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 53},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 7, 115, 101, 114, 105, 111, 117, 115, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 2, 61, 0, 3, 244, 128, 0, 0, 0, 0, 0, 0, 0, 0, 3, 110, 115, 55, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 3, 110, 115, 55, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 28, 61, 0, 3, 244, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 253, 9, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 53},
			},
		},
	},
	{
		in:      []byte("&abc.x.org,fd09:14f5:dead:beef:1::34,ns2.dot.com,3600,,x\\171"),
		outText: []byte("&abc.x.org,fd09:14f5:dead:beef:1::34,ns2.dot.com,3600,,\\170\\171"),
		out: []MapRecord{
			{
				Key:   []byte{120, 121, 3, 97, 98, 99, 1, 120, 3, 111, 114, 103, 0},
				Value: []byte{0, 2, 62, 120, 121, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 3, 110, 115, 50, 3, 100, 111, 116, 3, 99, 111, 109, 0},
			},
			{
				Key:   []byte{120, 121, 3, 110, 115, 50, 3, 100, 111, 116, 3, 99, 111, 109, 0},
				Value: []byte{0, 28, 62, 120, 121, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 253, 9, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 52},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 111, 114, 103, 1, 120, 3, 97, 98, 99, 0, // inverted name
					120, 121, // location
				},
				Value: []byte{0, 2, 62, 120, 121, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 3, 110, 115, 50, 3, 100, 111, 116, 3, 99, 111, 109, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 3, 100, 111, 116, 3, 110, 115, 50, 0, // inverted name
					120, 121, // location
				},
				Value: []byte{0, 28, 62, 120, 121, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 253, 9, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 52},
			},
		},
	},
	{
		in:      []byte("&bistro.io,,b.ns.facebook.com,172800"),
		outText: []byte("&bistro.io,,b.ns.facebook.com,172800,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 6, 98, 105, 115, 116, 114, 111, 2, 105, 111, 0},
				Value: []byte{0, 2, 61, 0, 2, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 98, 2, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					2, 105, 111, 6, 98, 105, 115, 116, 114, 111, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 2, 61, 0, 2, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 98, 2, 110, 115, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0},
			},
		},
	},
	{
		in:      []byte("+button.pani\\143.mil:1.2.3.4"),
		outText: []byte("+button.panic.mil,1.2.3.4,86400,,,1"),
		out: []MapRecord{{
			Key:   []byte{0, 0, 6, 98, 117, 116, 116, 111, 110, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			Value: []byte{0, 1, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 4},
		}},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 6, 98, 117, 116, 116, 111, 110, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 1, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 4},
			}},
	},
	{
		in:      []byte("+cup.panic.mil,fd0a:14f5:dead:beef:1::36"),
		outText: []byte("+cup.panic.mil,fd0a:14f5:dead:beef:1::36,86400,,,1"),
		out: []MapRecord{{
			Key:   []byte{0, 0, 3, 99, 117, 112, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			Value: []byte{0, 28, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 253, 10, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 54},
		}},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 3, 99, 117, 112, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 28, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 253, 10, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 54},
			}},
	},
	{
		in:      []byte("+button.panic.mil:1.2.3.4:7200::v\\141"),
		outText: []byte("+button.panic.mil,1.2.3.4,7200,,\\166\\141,1"),
		out: []MapRecord{{
			Key:   []byte{118, 97, 6, 98, 117, 116, 116, 111, 110, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			Value: []byte{0, 1, 62, 118, 97, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 4},
		}},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 6, 98, 117, 116, 116, 111, 110, 0, // inverted name
					118, 97, // location
				},
				Value: []byte{0, 1, 62, 118, 97, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 4},
			},
		},
	},
	{
		in:      []byte("+*.grid.example.com,10.10.10.10,3600"),
		outText: []byte("+*.grid.example.com,10.10.10.10,3600,,,1"),
		out: []MapRecord{{
			Key:   []byte{0, 0, 4, 103, 114, 105, 100, 7, 101, 120, 97, 109, 112, 108, 101, 3, 99, 111, 109, 0},
			Value: []byte{0, 1, 42, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 10, 10, 10},
		}},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 7, 101, 120, 97, 109, 112, 108, 101, 4, 103, 114, 105, 100, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 1, 42, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 10, 10, 10},
			},
		},
	},
	{
		in:      []byte("+2cthefacebook.com,102.132.96.18,300,,\\000\\047,50000"),
		outText: []byte("+2cthefacebook.com,102.132.96.18,300,,\\000\\047,50000"),
		out: []MapRecord{{
			Key:   []byte{0, 39, 13, 50, 99, 116, 104, 101, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0},
			Value: []byte{0, 1, 62, 0, 39, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 80, 102, 132, 96, 18},
		}},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 13, 50, 99, 116, 104, 101, 102, 97, 99, 101, 98, 111, 111, 107, 0, // inverted name
					0, 39, // location
				},
				Value: []byte{0, 1, 62, 0, 39, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 80, 102, 132, 96, 18},
			},
		},
	},
	{
		in:      []byte(`+2cthefacebook.com,102.132.96.18,300,,\000",50000`),
		outText: []byte("+2cthefacebook.com,102.132.96.18,300,,\\000\\042,50000"),
		out: []MapRecord{{
			Key:   []byte{0, 34, 13, 50, 99, 116, 104, 101, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0},
			Value: []byte{0, 1, 62, 0, 34, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 80, 102, 132, 96, 18},
		}},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 13, 50, 99, 116, 104, 101, 102, 97, 99, 101, 98, 111, 111, 107, 0, // inverted name
					0, 34, // location
				},
				Value: []byte{0, 1, 62, 0, 34, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 195, 80, 102, 132, 96, 18},
			},
		},
	},
	{
		in:      []byte("=button.p\\141nic.mil:1.8.7.108"),
		outText: []byte("=button.panic.mil,1.8.7.108,86400,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 6, 98, 117, 116, 116, 111, 110, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
				Value: []byte{0, 1, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 8, 7, 108},
			},
			{
				Key:   []byte{0, 0, 3, 49, 48, 56, 1, 55, 1, 56, 1, 49, 7, 105, 110, 45, 97, 100, 100, 114, 4, 97, 114, 112, 97, 0},
				Value: []byte{0, 12, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 6, 98, 117, 116, 116, 111, 110, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 6, 98, 117, 116, 116, 111, 110, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 1, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 8, 7, 108},
			},
			{
				Key: []byte{
					0, 111, // prefix
					4, 97, 114, 112, 97, 7, 105, 110, 45, 97, 100, 100, 114, 1, 49, 1, 56, 1, 55, 3, 49, 48, 56, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 12, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 6, 98, 117, 116, 116, 111, 110, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
		},
	},
	{
		in:      []byte("=feed.panic.mil,fc0a:14f5:dead:beef:1::37,86399"),
		outText: []byte("=feed.panic.mil,fc0a:14f5:dead:beef:1::37,86399,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 4, 102, 101, 101, 100, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
				Value: []byte{0, 28, 61, 0, 1, 81, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 252, 10, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 55},
			},
			{
				Key:   []byte{0, 0, 1, 55, 1, 51, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 49, 1, 48, 1, 48, 1, 48, 1, 102, 1, 101, 1, 101, 1, 98, 1, 100, 1, 97, 1, 101, 1, 100, 1, 53, 1, 102, 1, 52, 1, 49, 1, 97, 1, 48, 1, 99, 1, 102, 3, 105, 112, 54, 4, 97, 114, 112, 97, 0},
				Value: []byte{0, 12, 61, 0, 1, 81, 127, 0, 0, 0, 0, 0, 0, 0, 0, 4, 102, 101, 101, 100, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 4, 102, 101, 101, 100, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 28, 61, 0, 1, 81, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 252, 10, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 55},
			},
			{
				Key: []byte{
					0, 111, // prefix
					4, 97, 114, 112, 97, 3, 105, 112, 54, 1, 102, 1, 99, 1, 48, 1, 97, 1, 49, 1, 52, 1, 102, 1, 53, 1, 100, 1, 101, 1, 97, 1, 100, 1, 98, 1, 101, 1, 101, 1, 102, 1, 48, 1, 48, 1, 48, 1, 49, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 48, 1, 51, 1, 55, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 12, 61, 0, 1, 81, 127, 0, 0, 0, 0, 0, 0, 0, 0, 4, 102, 101, 101, 100, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
		},
	},
	{
		in:      []byte("=button.pani\\143.mil:1.8.7.108:3600::\\146l"),
		outText: []byte("=button.panic.mil,1.8.7.108,3600,,\\146\\154"),
		out: []MapRecord{
			{
				Key:   []byte{102, 108, 6, 98, 117, 116, 116, 111, 110, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
				Value: []byte{0, 1, 62, 102, 108, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 8, 7, 108},
			},
			{
				Key:   []byte{102, 108, 3, 49, 48, 56, 1, 55, 1, 56, 1, 49, 7, 105, 110, 45, 97, 100, 100, 114, 4, 97, 114, 112, 97, 0},
				Value: []byte{0, 12, 62, 102, 108, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 6, 98, 117, 116, 116, 111, 110, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 109, 105, 108, 5, 112, 97, 110, 105, 99, 6, 98, 117, 116, 116, 111, 110, 0, // inverted name
					102, 108, // location
				},
				Value: []byte{0, 1, 62, 102, 108, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 8, 7, 108},
			},
			{
				Key: []byte{
					0, 111, // prefix
					4, 97, 114, 112, 97, 7, 105, 110, 45, 97, 100, 100, 114, 1, 49, 1, 56, 1, 55, 3, 49, 48, 56, 0, // inverted name
					102, 108, // location
				},
				Value: []byte{0, 12, 62, 102, 108, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 6, 98, 117, 116, 116, 111, 110, 5, 112, 97, 110, 105, 99, 3, 109, 105, 108, 0},
			},
		},
	},
	{
		in:      []byte("=*.ghe.oculusvr.com,52.8.73.118,300"),
		outText: []byte("=*.ghe.oculusvr.com,52.8.73.118,300,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 3, 103, 104, 101, 8, 111, 99, 117, 108, 117, 115, 118, 114, 3, 99, 111, 109, 0},
				Value: []byte{0, 1, 42, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 52, 8, 73, 118},
			},
			{
				Key:   []byte{0, 0, 3, 49, 49, 56, 2, 55, 51, 1, 56, 2, 53, 50, 7, 105, 110, 45, 97, 100, 100, 114, 4, 97, 114, 112, 97, 0},
				Value: []byte{0, 12, 61, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 3, 103, 104, 101, 8, 111, 99, 117, 108, 117, 115, 118, 114, 3, 99, 111, 109, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 8, 111, 99, 117, 108, 117, 115, 118, 114, 3, 103, 104, 101, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 1, 42, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 52, 8, 73, 118},
			},
			{
				Key: []byte{
					0, 111, // prefix
					4, 97, 114, 112, 97, 7, 105, 110, 45, 97, 100, 100, 114, 2, 53, 50, 1, 56, 2, 55, 51, 3, 49, 49, 56, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 12, 61, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 3, 103, 104, 101, 8, 111, 99, 117, 108, 117, 115, 118, 114, 3, 99, 111, 109, 0},
			},
		},
	},
	{
		in:      []byte("@stor\\145.com:1.2.3.44:m\\141il.store.com"),
		outText: []byte("@store.com,1.2.3.44,mail.store.com,0,86400,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 5, 115, 116, 111, 114, 101, 3, 99, 111, 109, 0},
				Value: []byte{0, 15, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 109, 97, 105, 108, 5, 115, 116, 111, 114, 101, 3, 99, 111, 109, 0},
			},
			{
				Key:   []byte{0, 0, 4, 109, 97, 105, 108, 5, 115, 116, 111, 114, 101, 3, 99, 111, 109, 0},
				Value: []byte{0, 1, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 44},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 5, 115, 116, 111, 114, 101, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 15, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 109, 97, 105, 108, 5, 115, 116, 111, 114, 101, 3, 99, 111, 109, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 5, 115, 116, 111, 114, 101, 4, 109, 97, 105, 108, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 1, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 44},
			},
		},
	},
	{
		in:      []byte("@creep.net,fb0a:14f5:dead:beef:1::38,a,20,7200"),
		outText: []byte("@creep.net,fb0a:14f5:dead:beef:1::38,a.mx.creep.net,20,7200,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 5, 99, 114, 101, 101, 112, 3, 110, 101, 116, 0},
				Value: []byte{0, 15, 61, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 1, 97, 2, 109, 120, 5, 99, 114, 101, 101, 112, 3, 110, 101, 116, 0},
			},
			{
				Key:   []byte{0, 0, 1, 97, 2, 109, 120, 5, 99, 114, 101, 101, 112, 3, 110, 101, 116, 0},
				Value: []byte{0, 28, 61, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 251, 10, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 56},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 110, 101, 116, 5, 99, 114, 101, 101, 112, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 15, 61, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 1, 97, 2, 109, 120, 5, 99, 114, 101, 101, 112, 3, 110, 101, 116, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					3, 110, 101, 116, 5, 99, 114, 101, 101, 112, 2, 109, 120, 1, 97, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 28, 61, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 251, 10, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 56},
			},
		},
	},
	{
		in:      []byte("@creep.de,fb0a:14f5:dead:beef:2::38,bb,20,7200,,y\\172"),
		outText: []byte("@creep.de,fb0a:14f5:dead:beef:2::38,bb.mx.creep.de,20,7200,,\\171\\172"),
		out: []MapRecord{
			{
				Key:   []byte{121, 122, 5, 99, 114, 101, 101, 112, 2, 100, 101, 0},
				Value: []byte{0, 15, 62, 121, 122, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 98, 98, 2, 109, 120, 5, 99, 114, 101, 101, 112, 2, 100, 101, 0},
			},
			{
				Key:   []byte{121, 122, 2, 98, 98, 2, 109, 120, 5, 99, 114, 101, 101, 112, 2, 100, 101, 0},
				Value: []byte{0, 28, 62, 121, 122, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 251, 10, 20, 245, 222, 173, 190, 239, 0, 2, 0, 0, 0, 0, 0, 56},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					2, 100, 101, 5, 99, 114, 101, 101, 112, 0, // inverted name
					121, 122, // location
				},
				Value: []byte{0, 15, 62, 121, 122, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 98, 98, 2, 109, 120, 5, 99, 114, 101, 101, 112, 2, 100, 101, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					2, 100, 101, 5, 99, 114, 101, 101, 112, 2, 109, 120, 2, 98, 98, 0, // inverted name
					121, 122, // location
				},
				Value: []byte{0, 28, 62, 121, 122, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 251, 10, 20, 245, 222, 173, 190, 239, 0, 2, 0, 0, 0, 0, 0, 56},
			},
		},
	},
	{
		in:      []byte("@adsmail.facebook.com,,mx01.facebookmail.com,10,3600"),
		outText: []byte("@adsmail.facebook.com,,mx01.facebookmail.com,10,3600,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 7, 97, 100, 115, 109, 97, 105, 108, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0},
				Value: []byte{0, 15, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 4, 109, 120, 48, 49, 12, 102, 97, 99, 101, 98, 111, 111, 107, 109, 97, 105, 108, 3, 99, 111, 109, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 8, 102, 97, 99, 101, 98, 111, 111, 107, 7, 97, 100, 115, 109, 97, 105, 108, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 15, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 4, 109, 120, 48, 49, 12, 102, 97, 99, 101, 98, 111, 111, 107, 109, 97, 105, 108, 3, 99, 111, 109, 0},
			},
		},
	},
	{
		in:      []byte("Sdelta.net:1.2.3.45:1.db.delta.net:10::443"),
		outText: []byte("Sdelta.net,1.2.3.45,1.db.delta.net,10,0,443,86400,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 5, 100, 101, 108, 116, 97, 3, 110, 101, 116, 0},
				Value: []byte{0, 33, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 187, 0, 10, 1, 49, 2, 100, 98, 5, 100, 101, 108, 116, 97, 3, 110, 101, 116, 0},
			},
			{
				Key:   []byte{0, 0, 1, 49, 2, 100, 98, 5, 100, 101, 108, 116, 97, 3, 110, 101, 116, 0},
				Value: []byte{0, 1, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 45},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 110, 101, 116, 5, 100, 101, 108, 116, 97, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 33, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 187, 0, 10, 1, 49, 2, 100, 98, 5, 100, 101, 108, 116, 97, 3, 110, 101, 116, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					3, 110, 101, 116, 5, 100, 101, 108, 116, 97, 2, 100, 98, 1, 49, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 1, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 45},
			},
		},
	},
	{
		in:      []byte("Sgru\\142.org,fb0a:14f5:dead:beef:1::39,primary,20,99,80,7200,,l\\061"),
		outText: []byte("Sgrub.org,fb0a:14f5:dead:beef:1::39,primary.srv.grub.org,20,99,80,7200,,\\154\\061"),
		out: []MapRecord{
			{
				Key:   []byte{108, 49, 4, 103, 114, 117, 98, 3, 111, 114, 103, 0},
				Value: []byte{0, 33, 62, 108, 49, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 80, 0, 20, 7, 112, 114, 105, 109, 97, 114, 121, 3, 115, 114, 118, 4, 103, 114, 117, 98, 3, 111, 114, 103, 0},
			},
			{
				Key:   []byte{108, 49, 7, 112, 114, 105, 109, 97, 114, 121, 3, 115, 114, 118, 4, 103, 114, 117, 98, 3, 111, 114, 103, 0},
				Value: []byte{0, 28, 62, 108, 49, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 251, 10, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 57},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 111, 114, 103, 4, 103, 114, 117, 98, 0, // inverted name
					108, 49, // location
				},
				Value: []byte{0, 33, 62, 108, 49, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 80, 0, 20, 7, 112, 114, 105, 109, 97, 114, 121, 3, 115, 114, 118, 4, 103, 114, 117, 98, 3, 111, 114, 103, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					3, 111, 114, 103, 4, 103, 114, 117, 98, 3, 115, 114, 118, 7, 112, 114, 105, 109, 97, 114, 121, 0, // inverted name
					108, 49, // location
				},
				Value: []byte{0, 28, 62, 108, 49, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 251, 10, 20, 245, 222, 173, 190, 239, 0, 1, 0, 0, 0, 0, 0, 57},
			},
		},
	},
	{
		in:      []byte("Sdex.com:1.2.3.55:1.db.d\\145lta.net:20::80:::d\\145"),
		outText: []byte("Sdex.com,1.2.3.55,1.db.delta.net,20,0,80,86400,,\\144\\145"),
		out: []MapRecord{
			{
				Key:   []byte{100, 101, 3, 100, 101, 120, 3, 99, 111, 109, 0},
				Value: []byte{0, 33, 62, 100, 101, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 20, 1, 49, 2, 100, 98, 5, 100, 101, 108, 116, 97, 3, 110, 101, 116, 0},
			},
			{
				Key:   []byte{100, 101, 1, 49, 2, 100, 98, 5, 100, 101, 108, 116, 97, 3, 110, 101, 116, 0},
				Value: []byte{0, 1, 62, 100, 101, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 55},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 3, 100, 101, 120, 0, // inverted name
					100, 101, // location
				},
				Value: []byte{0, 33, 62, 100, 101, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 20, 1, 49, 2, 100, 98, 5, 100, 101, 108, 116, 97, 3, 110, 101, 116, 0},
			},
			{
				Key: []byte{
					0, 111, // prefix
					3, 110, 101, 116, 5, 100, 101, 108, 116, 97, 2, 100, 98, 1, 49, 0, // inverted name
					100, 101, // location
				},
				Value: []byte{0, 1, 62, 100, 101, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 55},
			},
		},
	},
	{
		in:      []byte("C\\145arth.pla.net:some.infr\\141.net"),
		outText: []byte("Cearth.pla.net,some.infra.net,86400,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 5, 101, 97, 114, 116, 104, 3, 112, 108, 97, 3, 110, 101, 116, 0},
				Value: []byte{0, 5, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 4, 115, 111, 109, 101, 5, 105, 110, 102, 114, 97, 3, 110, 101, 116, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 110, 101, 116, 3, 112, 108, 97, 5, 101, 97, 114, 116, 104, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 5, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 4, 115, 111, 109, 101, 5, 105, 110, 102, 114, 97, 3, 110, 101, 116, 0},
			},
		},
	},
	{
		in:      []byte("Cfly.air.com,www.example.com,7200,,l\\062"),
		outText: []byte("Cfly.air.com,www.example.com,7200,,\\154\\062"),
		out: []MapRecord{
			{
				Key:   []byte{108, 50, 3, 102, 108, 121, 3, 97, 105, 114, 3, 99, 111, 109, 0},
				Value: []byte{0, 5, 62, 108, 50, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 3, 119, 119, 119, 7, 101, 120, 97, 109, 112, 108, 101, 3, 99, 111, 109, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 3, 97, 105, 114, 3, 102, 108, 121, 0, // inverted name
					108, 50, // location
				},
				Value: []byte{0, 5, 62, 108, 50, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 3, 119, 119, 119, 7, 101, 120, 97, 109, 112, 108, 101, 3, 99, 111, 109, 0},
			},
		},
	},
	{
		in:      []byte("C*.0.discoverapp.com,z-m.c10r.facebook.com,7200"),
		outText: []byte("C*.0.discoverapp.com,z-m.c10r.facebook.com,7200,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 1, 48, 11, 100, 105, 115, 99, 111, 118, 101, 114, 97, 112, 112, 3, 99, 111, 109, 0},
				Value: []byte{0, 5, 42, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 3, 122, 45, 109, 4, 99, 49, 48, 114, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 11, 100, 105, 115, 99, 111, 118, 101, 114, 97, 112, 112, 1, 48, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 5, 42, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 3, 122, 45, 109, 4, 99, 49, 48, 114, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0},
			},
		},
	},
	{
		in:      []byte("Cr.registrarsec.com,Registrar-Frontend-1730073353.us-west-2.elb.amazonaws.com,3600"),
		outText: []byte("Cr.registrarsec.com,Registrar-Frontend-1730073353.us-west-2.elb.amazonaws.com,3600,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 1, 114, 12, 114, 101, 103, 105, 115, 116, 114, 97, 114, 115, 101, 99, 3, 99, 111, 109, 0},
				Value: []byte{0, 5, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 29, 82, 101, 103, 105, 115, 116, 114, 97, 114, 45, 70, 114, 111, 110, 116, 101, 110, 100, 45, 49, 55, 51, 48, 48, 55, 51, 51, 53, 51, 9, 117, 115, 45, 119, 101, 115, 116, 45, 50, 3, 101, 108, 98, 9, 97, 109, 97, 122, 111, 110, 97, 119, 115, 3, 99, 111, 109, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 12, 114, 101, 103, 105, 115, 116, 114, 97, 114, 115, 101, 99, 1, 114, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 5, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 29, 82, 101, 103, 105, 115, 116, 114, 97, 114, 45, 70, 114, 111, 110, 116, 101, 110, 100, 45, 49, 55, 51, 48, 48, 55, 51, 51, 53, 51, 9, 117, 115, 45, 119, 101, 115, 116, 45, 50, 3, 101, 108, 98, 9, 97, 109, 97, 122, 111, 110, 97, 119, 115, 3, 99, 111, 109, 0},
			},
		},
	},
	{
		in:      []byte("^168.192.in-addr.\\141rpa:some.host.n\\145t"),
		outText: []byte("^168.192.in-addr.arpa,some.host.net,86400,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 3, 49, 54, 56, 3, 49, 57, 50, 7, 105, 110, 45, 97, 100, 100, 114, 4, 97, 114, 112, 97, 0},
				Value: []byte{0, 12, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 4, 115, 111, 109, 101, 4, 104, 111, 115, 116, 3, 110, 101, 116, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					4, 97, 114, 112, 97, 7, 105, 110, 45, 97, 100, 100, 114, 3, 49, 57, 50, 3, 49, 54, 56, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 12, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 4, 115, 111, 109, 101, 4, 104, 111, 115, 116, 3, 110, 101, 116, 0},
			},
		},
	},
	{
		in:      []byte("^fe.ff.ip6.arpa,host1.local,7200,,l\\065"),
		outText: []byte("^fe.ff.ip6.arpa,host1.local,7200,,\\154\\065"),
		out: []MapRecord{
			{
				Key:   []byte{108, 53, 2, 102, 101, 2, 102, 102, 3, 105, 112, 54, 4, 97, 114, 112, 97, 0},
				Value: []byte{0, 12, 62, 108, 53, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 5, 104, 111, 115, 116, 49, 5, 108, 111, 99, 97, 108, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					4, 97, 114, 112, 97, 3, 105, 112, 54, 2, 102, 102, 2, 102, 101, 0, // inverted name
					108, 53, // location
				},
				Value: []byte{0, 12, 62, 108, 53, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 5, 104, 111, 115, 116, 49, 5, 108, 111, 99, 97, 108, 0},
			},
		},
	},
	{
		in:      []byte("'whatis.example.com,blah blah blah,7200,,l\\066"),
		outText: []byte("'whatis.example.com,blah blah blah,7200,,\\154\\066"),
		out: []MapRecord{
			{
				Key:   []byte{108, 54, 6, 119, 104, 97, 116, 105, 115, 7, 101, 120, 97, 109, 112, 108, 101, 3, 99, 111, 109, 0},
				Value: []byte{0, 16, 62, 108, 54, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 14, 98, 108, 97, 104, 32, 98, 108, 97, 104, 32, 98, 108, 97, 104},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 7, 101, 120, 97, 109, 112, 108, 101, 6, 119, 104, 97, 116, 105, 115, 0, // inverted name
					108, 54, // location
				},
				Value: []byte{0, 16, 62, 108, 54, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 14, 98, 108, 97, 104, 32, 98, 108, 97, 104, 32, 98, 108, 97, 104},
			},
		},
	},
	{
		in:      []byte("'wh\\141tis.example.com,1234 \\001"),
		outText: []byte("'whatis.example.com,1234 \\x01,86400,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 6, 119, 104, 97, 116, 105, 115, 7, 101, 120, 97, 109, 112, 108, 101, 3, 99, 111, 109, 0},
				Value: []byte{0, 16, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 6, 49, 50, 51, 52, 32, 1},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 7, 101, 120, 97, 109, 112, 108, 101, 6, 119, 104, 97, 116, 105, 115, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 16, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 6, 49, 50, 51, 52, 32, 1},
			},
		},
	},
	{
		in:      []byte("'*.ads.x.com,v=spf1 a ~all,7200"),
		outText: []byte("'*.ads.x.com,v=spf1 a ~all,7200,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 3, 97, 100, 115, 1, 120, 3, 99, 111, 109, 0},
				Value: []byte{0, 16, 42, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 13, 118, 61, 115, 112, 102, 49, 32, 97, 32, 126, 97, 108, 108},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 1, 120, 3, 97, 100, 115, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{0, 16, 42, 0, 0, 28, 32, 0, 0, 0, 0, 0, 0, 0, 0, 13, 118, 61, 115, 112, 102, 49, 32, 97, 32, 126, 97, 108, 108},
			},
		},
	},
	{
		in:      []byte("'facebookmx.com,v=spf1 ip4:69.63.178.128/25 ip4:69.63.184.0/25 ip4:66.220.144.128/25 ip4:66.220.155.128/25 ip4:69.171.232.128/25 ip4:66.220.157.0/25 -all,3600"),
		outText: []byte("'facebookmx.com,v=spf1 ip4\\07269.63.178.128/25 ip4\\07269.63.184.0/25 ip4\\07266.220.144.128/25 ip4\\07266.220.155.128/25 ip4\\07269.171.232.128/25 ip4\\07266.220.157.0/25 -all,3600,,"),
		out: []MapRecord{
			{
				Key: []byte{0, 0, 10, 102, 97, 99, 101, 98, 111, 111, 107, 109, 120, 3, 99, 111, 109, 0},
				Value: []byte{
					0, 16, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 127, 118, 61, 115, 112, 102, 49,
					32, 105, 112, 52, 58, 54, 57, 46, 54, 51, 46, 49, 55, 56, 46, 49, 50, 56, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 57, 46, 54, 51, 46, 49, 56, 52, 46, 48, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 54, 46, 50, 50, 48, 46, 49, 52, 52, 46, 49, 50, 56, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 54, 46, 50, 50, 48, 46, 49, 53, 53, 46, 49, 50, 56, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 57, 46, 49, 55, 49, 46, 50, 51, 50, 46, 49, 50, 56, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 54, 46, 50, 50, 48, 46, 49, 53, 55, 10, 46, 48, 47, 50, 53,
					32, 45, 97, 108, 108,
				},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // prefix
					3, 99, 111, 109, 10, 102, 97, 99, 101, 98, 111, 111, 107, 109, 120, 0, // inverted name
					0, 0, // location
				},
				Value: []byte{
					0, 16, 61, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 127, 118, 61, 115, 112, 102, 49,
					32, 105, 112, 52, 58, 54, 57, 46, 54, 51, 46, 49, 55, 56, 46, 49, 50, 56, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 57, 46, 54, 51, 46, 49, 56, 52, 46, 48, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 54, 46, 50, 50, 48, 46, 49, 52, 52, 46, 49, 50, 56, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 54, 46, 50, 50, 48, 46, 49, 53, 53, 46, 49, 50, 56, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 57, 46, 49, 55, 49, 46, 50, 51, 50, 46, 49, 50, 56, 47, 50, 53,
					32, 105, 112, 52, 58, 54, 54, 46, 50, 50, 48, 46, 49, 53, 55, 10, 46, 48, 47, 50, 53,
					32, 45, 97, 108, 108,
				},
			},
		},
	},
	{
		in:      []byte(":some.custom.n\\145t,99,some t\\145xt,3600,,l\\141"),
		outText: []byte(":some.custom.net,99,some text,3600,,\\154\\141"),
		out: []MapRecord{
			{
				Key:   []byte{108, 97, 4, 115, 111, 109, 101, 6, 99, 117, 115, 116, 111, 109, 3, 110, 101, 116, 0},
				Value: []byte{0, 99, 62, 108, 97, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 109, 101, 32, 116, 101, 120, 116},
			},
		},
		outV2: []MapRecord{
			{
				Key:   []byte{0, 111, 3, 110, 101, 116, 6, 99, 117, 115, 116, 111, 109, 4, 115, 111, 109, 101, 0, 108, 97},
				Value: []byte{0, 99, 62, 108, 97, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 109, 101, 32, 116, 101, 120, 116},
			},
		},
	},
	{
		in:      []byte(":ext.fb.com,98,\\001\\002\\003\\004"),
		outText: []byte(":ext.fb.com,98,\\x01\\x02\\x03\\x04,86400,,"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 3, 101, 120, 116, 2, 102, 98, 3, 99, 111, 109, 0},
				Value: []byte{0, 98, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4},
			},
		},
		outV2: []MapRecord{
			{
				Key:   []byte{0, 111, 3, 99, 111, 109, 2, 102, 98, 3, 101, 120, 116, 0, 0, 0},
				Value: []byte{0, 98, 61, 0, 1, 81, 128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4},
			},
		},
	},
	{
		in:      []byte(":ext.fb.com,98,\\001\\002\\003\\004,3600,,c\\001"),
		outText: []byte(":ext.fb.com,98,\\x01\\x02\\x03\\x04,3600,,\\143\\001"),
		out: []MapRecord{
			{
				Key:   []byte{99, 1, 3, 101, 120, 116, 2, 102, 98, 3, 99, 111, 109, 0},
				Value: []byte{0, 98, 62, 99, 1, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4},
			},
		},
		outV2: []MapRecord{
			{
				Key:   []byte{0, 111, 3, 99, 111, 109, 2, 102, 98, 3, 101, 120, 116, 0, 99, 1},
				Value: []byte{0, 98, 62, 99, 1, 0, 0, 14, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4},
			},
		},
	},
	{
		in:      []byte("Mfbasic.n\\145t,c\\000"),
		outText: []byte("Mfbasic.net,\\143\\000"),
		out: []MapRecord{
			{
				Key:   []byte{0, 77, 6, 102, 98, 97, 115, 105, 99, 3, 110, 101, 116, 0, 61},
				Value: []byte{99, 0},
			},
		},
		outV2: []MapRecord{
			{
				Key:   []byte{0, 77, 3, 110, 101, 116, 6, 102, 98, 97, 115, 105, 99, 0, 61},
				Value: []byte{99, 0},
			},
		},
	},
	{
		in:      []byte("M*.www.example.com,im"),
		outText: []byte("M*.www.example.com,\\151\\155"),
		out: []MapRecord{
			{
				Key:   []byte{0, 77, 3, 119, 119, 119, 7, 101, 120, 97, 109, 112, 108, 101, 3, 99, 111, 109, 0, 42},
				Value: []byte{105, 109},
			},
		},
		outV2: []MapRecord{
			{
				Key:   []byte{0, 77, 3, 99, 111, 109, 7, 101, 120, 97, 109, 112, 108, 101, 3, 119, 119, 119, 0, 42},
				Value: []byte{105, 109},
			},
		},
	},
	{
		in:      []byte("8www.fac\\145book.com,i8"),
		outText: []byte("8www.facebook.com,\\151\\070"),
		out: []MapRecord{
			{
				Key:   []byte{0, 56, 3, 119, 119, 119, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 99, 111, 109, 0, 61},
				Value: []byte{105, 56},
			},
		},
		outV2: []MapRecord{
			{
				Key:   []byte{0, 56, 3, 99, 111, 109, 8, 102, 97, 99, 101, 98, 111, 111, 107, 3, 119, 119, 119, 0, 61},
				Value: []byte{105, 56},
			},
		},
	},
	{
		in:      []byte("!m1,0.0.0.0"),
		outText: []byte("!\\155\\061,0.0.0.0"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 0, '!', 'm', '1', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0},
				Value: []byte(nil),
			},
		},
	},
	{
		in:      []byte("!m1,0.0.0.0,0,de"),
		outText: []byte("!\\155\\061,0.0.0.0,0,\\144\\145"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 0, '!', 'm', '1', 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x60},
				Value: []byte{'d', 'e'},
			},
		},
	},
	{
		in:      []byte("!m1,2a00:1fa0:42d8::,64,a\\x01"),
		outText: []byte("!\\155\\061,2a00:1fa0:42d8::,64,\\141\\001"),
		out: []MapRecord{
			{
				Key:   []byte{0, 0, 0, '!', 'm', '1', 0x2a, 0x0, 0x1f, 0xa0, 0x42, 0xd8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 64},
				Value: []byte{'a', 1},
			},
		},
	},
	{
		// SVCB record in AliasMode. No SvcParam fields
		// Note that AliasMode records will have trailing commas (ServiceMode records won't)
		in:      []byte("B_8080._foo.facebook.com,bar.facebook.com,300,\\000\\000,0"),
		outText: []byte("B_8080._foo.facebook.com,bar.facebook.com,300,\\000\\000,0,"),
		out: []MapRecord{
			{
				Key: []byte{
					0, 0, // loc=\000\000"
					5, '_', '8', '0', '8', '0', // _8080
					4, '_', 'f', 'o', 'o', // _foo
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					3, 'c', 'o', 'm', 0, // com.
				},
				Value: []byte{
					0, 64, // SVCB Type
					'=',         // loc
					0, 0, 1, 44, // ttl
					0, 0, 0, 0, 0, 0, 0, 0, // 8 zeros from putrrhead
					0, 0, // SvcPriority (AliasMode)
					3, 'b', 'a', 'r', // bar
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					3, 'c', 'o', 'm', 0, // com.
				},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // "x\00o",
					3, 'c', 'o', 'm', // com
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					4, '_', 'f', 'o', 'o', // _foo
					5, '_', '8', '0', '8', '0', 0, // _8080.
					0, 0, // // loc=\000\000"
				},
				Value: []byte{
					0, 64, // SVCB Type
					'=',         // loc
					0, 0, 1, 44, // ttl
					0, 0, 0, 0, 0, 0, 0, 0, // 8 zeros from putrrhead
					0, 0, // SvcPriority (AliasMode)
					3, 'b', 'a', 'r', // bar
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					3, 'c', 'o', 'm', 0, // com.
				},
			},
		},
	},
	{
		// HTTPS records should have exactly the same RDATA as SVCB records
		// the type numbers are different (HTTPS=65)
		in:      []byte("Hfacebook.com,star-mini.c10r.facebook.com,300,\\000\\000,0"),
		outText: []byte("Hfacebook.com,star-mini.c10r.facebook.com,300,\\000\\000,0,"),
		out: []MapRecord{
			{
				Key: []byte{
					0, 0, // loc=\000\000
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					3, 'c', 'o', 'm', 0, // com.
				},
				Value: []byte{
					0, 65, // HTTPS Type
					'=',         // loc
					0, 0, 1, 44, // ttl
					0, 0, 0, 0, 0, 0, 0, 0, // 8 zeros from putrrhead
					0, 0, // SvcPriority (AliasMode)
					9, 's', 't', 'a', 'r', '-', 'm', 'i', 'n', 'i', // star-mini
					4, 'c', '1', '0', 'r', // c10r
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					3, 'c', 'o', 'm', 0, // com.
				},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // "x\00o",
					3, 'c', 'o', 'm', // com
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', 0, // facebook
					0, 0, // // loc=\000\000"
				},
				Value: []byte{
					0, 65, // HTTPS Type
					'=',         // loc
					0, 0, 1, 44, // ttl
					0, 0, 0, 0, 0, 0, 0, 0, // 8 zeros from putrrhead
					0, 0, // SvcPriority (AliasMode)
					9, 's', 't', 'a', 'r', '-', 'm', 'i', 'n', 'i', // star-mini
					4, 'c', '1', '0', 'r', // c10r
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					3, 'c', 'o', 'm', 0, // com.
				},
			},
		},
	},
	{
		// HTTPS record in ServiceMode, with all the SvcParams
		in: []byte(
			"Hstar-mini.c10r.facebook.com,.,300,\\000\\000,1,ipv4hint=\"1.2.3.4|2.3.4.5\";mandatory=\"ipv4hint|alpn|ipv6hint\";alpn=h2|h3;ipv6hint=face:b00c::;ech=\"dHJhZmZpYw==\";no-default-alpn=;port=8080",
		),
		outText: []byte(
			"Hstar-mini.c10r.facebook.com,.,300,\\000\\000,1,mandatory=\"alpn|ipv4hint|ipv6hint\";alpn=\"h2|h3\";no-default-alpn=\"\";port=\"8080\";ipv4hint=\"1.2.3.4|2.3.4.5\";ech=\"dHJhZmZpYw==\";ipv6hint=\"face:b00c::\"",
		),
		out: []MapRecord{
			{
				Key: []byte{
					0, 0, // loc=\000\000"
					9, 's', 't', 'a', 'r', '-', 'm', 'i', 'n', 'i', // star-mini
					4, 'c', '1', '0', 'r', // c10r
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					3, 'c', 'o', 'm', 0, // com.
				},
				Value: []byte{
					0, 65, // HTTP Type
					'=',         // loc
					0, 0, 1, 44, // ttl
					0, 0, 0, 0, 0, 0, 0, 0, // 8 zeros from putrrhead
					0, 1, // SvcPriority (ServiceMode)
					0,    // target name = root
					0, 0, // key type mandatory
					0, 6, // param mandatory size=6
					0, 1, // alpn
					0, 4, // ipv4hint
					0, 6, // ipv6hint
					0, 1, // key type alpn
					0, 6, // param alpn size=6
					2,        // first alpn value size=2
					'h', '2', // h2
					2,        // first alpn value size=2
					'h', '3', // h3
					0, 2, // key type no-default-alpn
					0, 0, // param no-default-alpn size = 0
					0, 3, // key type port
					0, 2, // param port size = 2
					0x1f, 0x90, // port 8080
					0, 4, // key type ipv4hint
					0, 8, // param ipv4hint size=8
					1, 2, 3, 4, // 1.2.3.4
					2, 3, 4, 5, // 2.3.4.5
					0, 5, // key type ech config
					0, 7, // length = 7
					't', 'r', 'a', 'f', 'f', 'i', 'c', // ech public key
					0, 6, // key type ipv6hint
					0, 16, // param ipv6hint size=16
					0xfa, 0xce, 0xb0, 0x0c, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // face:b00c::
				},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // "x\00o",
					3, 'c', 'o', 'm', // com
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					4, 'c', '1', '0', 'r', // c10r
					9, 's', 't', 'a', 'r', '-', 'm', 'i', 'n', 'i', 0, // star-mini
					0, 0, // // loc=\000\000"
				},
				Value: []byte{
					0, 65, // HTTP Type
					'=',         // loc
					0, 0, 1, 44, // ttl
					0, 0, 0, 0, 0, 0, 0, 0, // 8 zeros from putrrhead
					0, 1, // SvcPriority (ServiceMode)
					0,    // root
					0, 0, // key type mandatory
					0, 6, // param mandatory size=6
					0, 1, // alpn
					0, 4, // ipv4hint
					0, 6, // ipv6hint
					0, 1, // key type alpn
					0, 6, // param alpn size=6
					2,        // first alpn value size=2
					'h', '2', // h2
					2,        // first alpn value size=2
					'h', '3', // h3
					0, 2, // key type no-default-alpn
					0, 0, // param no-default-alpn size = 0
					0, 3, // key type port
					0, 2, // param port size = 2
					0x1f, 0x90, // port 8080
					0, 4, // key type ipv4hint
					0, 8, // param ipv4hint size=8
					1, 2, 3, 4, // 1.2.3.4
					2, 3, 4, 5, // 2.3.4.5
					0, 5, // key type ech config
					0, 7, // length = 7
					't', 'r', 'a', 'f', 'f', 'i', 'c', // ech public key
					0, 6, // key type ipv6hint
					0, 16, // param ipv6hint size=16
					0xfa, 0xce, 0xb0, 0x0c, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // face:b00c::
				},
			},
		},
	},
	{
		in: []byte(
			"Hstar-mini.c10r.facebook.com,.,300,,1,port=53;no-default-alpn=\"\"",
		),
		outText: []byte(
			"Hstar-mini.c10r.facebook.com,.,300,,1,no-default-alpn=\"\";port=\"53\"",
		),
		out: []MapRecord{
			{
				Key: []byte{
					0, 0, // loc=\000\000"
					9, 's', 't', 'a', 'r', '-', 'm', 'i', 'n', 'i', // star-mini
					4, 'c', '1', '0', 'r', // c10r
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					3, 'c', 'o', 'm', 0, // com.
				},
				Value: []byte{
					0, 65, // HTTP Type
					'=',         // loc
					0, 0, 1, 44, // ttl
					0, 0, 0, 0, 0, 0, 0, 0, // 8 zeros from putrrhead
					0, 1, // SvcPriority (ServiceMode)
					0,    // target name = root
					0, 2, // key type no default alpn
					0, 0, // param length = 0
					0, 3, // key type port
					0, 2, // param length = 2
					0, 53, // port 53
				},
			},
		},
		outV2: []MapRecord{
			{
				Key: []byte{
					0, 111, // "x\00o",
					3, 'c', 'o', 'm', // com
					8, 'f', 'a', 'c', 'e', 'b', 'o', 'o', 'k', // facebook
					4, 'c', '1', '0', 'r', // c10r
					9, 's', 't', 'a', 'r', '-', 'm', 'i', 'n', 'i', 0, // star-mini.
					0, 0, // // loc=\000\000"
				},
				Value: []byte{
					0, 65, // HTTP Type
					'=',         // loc
					0, 0, 1, 44, // ttl
					0, 0, 0, 0, 0, 0, 0, 0, // 8 zeros from putrrhead
					0, 1, // SvcPriority (ServiceMode)
					0,    // target name = root
					0, 2, // key type no default alpn
					0, 0, // param length = 0
					0, 3, // key type port
					0, 2, // param length = 2
					0, 53, // port 53
				},
			},
		},
	},
}

func TestConvertLnStateful(t *testing.T) {
	codec := new(Codec)
	codec.Serial = testSerial
	for _, tc := range codectests {
		t.Run(string(tc.in), func(t *testing.T) {
			out, err := codec.ConvertLn(tc.in)
			if err != nil {
				t.Fatalf("error converting: %v", err)
			}
			if !reflect.DeepEqual(out, tc.out) {
				t.Fatalf("encoded differs: %v != %v (\n%#v\n%#v\n)",
					out, tc.out,
					out, tc.out)
			}
		})
	}
}

func BenchmarkConvertLn(b *testing.B) {
	for _, tc := range codectests {
		b.Run(string(tc.in), func(b *testing.B) {
			codec := new(Codec)
			in := codectests[0].in
			for n := 0; n < b.N; n++ {
				_, err := codec.ConvertLn(in)
				if err != nil {
					b.Fatalf("%v", err)
				}
			}
		})
	}
}

func TestMarshalText(t *testing.T) {
	for _, tc := range codectests {
		t.Run(string(tc.in), func(t *testing.T) {
			codec := new(Codec)
			codec.Serial = testSerial

			testMarshalText(t, codec, tc.in, tc.outText, tc.out)
		})

		if tc.outV2 != nil {
			t.Run(string(tc.in)+"/v2", func(t *testing.T) {
				codec := new(Codec)
				codec.Features.UseV2Keys = true
				codec.Serial = testSerial

				testMarshalText(t, codec, tc.in, tc.outText, tc.outV2)
			})
		}
	}
}

func TestDerivedRecords(t *testing.T) {
	type testCase struct {
		in      string
		record  Record
		derived []string
	}

	testCases := []testCase{
		{
			in:     ".test.com,1.8.7.55,a.ns.test.com,3600,,",
			record: &Rdot{},
			derived: []string{
				"Ztest.com,a.ns.test.com,hostmaster.test.com,,16384,2048,1048576,2560,2560,,",
				"&test.com,1.8.7.55,a.ns.test.com,3600,,",
			},
		},
		{
			in:     "&test.com,1.8.7.55,a.ns.test.com,3600,,",
			record: &Rns{},
			derived: []string{
				"&test.com,,a.ns.test.com,3600,,",
				"+a.ns.test.com,1.8.7.55,3600,,,1",
			},
		},
		{
			in:     "&test.com,,a.ns.test.com,3600,,",
			record: &Rns{},
			derived: []string{
				"&test.com,,a.ns.test.com,3600,,",
			},
		},
		{
			in:     "=test.com,1.8.7.55,3600,,",
			record: &Rpaddr{},
			derived: []string{
				"+test.com,1.8.7.55,3600,,,1",
				"^55.7.8.1.in-addr.arpa,test.com,3600,,",
			},
		},
		{
			in:     "@test.com,1.2.3.44,mail.test.com,0,3600,,",
			record: &Rmx{},
			derived: []string{
				"@test.com,,mail.test.com,0,3600,,",
				"+mail.test.com,1.2.3.44,3600,,,1",
			},
		},
		{
			in:     "@test.com,,mail.test.com,0,3600,,",
			record: &Rmx{},
			derived: []string{
				"@test.com,,mail.test.com,0,3600,,",
			},
		},
		{
			in:     "Stest.com,1.2.3.45,a.srv.test.com,10,0,443,3600,,",
			record: &Rsrv{},
			derived: []string{
				"Stest.com,,a.srv.test.com,10,0,443,3600,,",
				"+a.srv.test.com,1.2.3.45,3600,,,1",
			},
		},
		{
			in:     "Stest.com,,a.srv.test.com,10,0,443,3600,,",
			record: &Rsrv{},
			derived: []string{
				"Stest.com,,a.srv.test.com,10,0,443,3600,,",
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.in, func(t *testing.T) {
			err := tc.record.UnmarshalText([]byte(tc.in))
			require.NoError(t, err)

			derived := tc.record.(CompositeRecord).DerivedRecords()
			records := make([]string, 0, len(derived))

			for _, r := range derived {
				l, _ := r.MarshalText()
				records = append(records, string(l))
			}

			require.ElementsMatch(t, records, tc.derived)
		})
	}
}

func testMarshalText(t *testing.T, codec *Codec, inText, outText []byte, expectedOut []MapRecord) {
	r, err := codec.DecodeLn(inText)
	require.Nil(t, err)
	gotText, err := r.MarshalText()
	require.Nil(t, err)
	if len(outText) == 0 {
		t.Fatal("testcase outText is missing")
	}
	require.Equal(t, outText, gotText)

	// now, parse marshalled text and see if it produces same record
	out, err := codec.ConvertLn(gotText)
	if err != nil {
		t.Fatalf("error converting: %v", err)
	}
	if !reflect.DeepEqual(out, expectedOut) {
		t.Fatalf("encoded differs: %v != %v (\n%#v\n%#v\n)",
			out, expectedOut,
			out, expectedOut)
	}
}

func BenchmarkMarshalText(b *testing.B) {
	for _, tc := range codectests {
		b.Run(string(tc.in), func(b *testing.B) {
			codec := new(Codec)
			r, err := codec.DecodeLn(tc.in)
			if err != nil {
				b.Fatalf("%v", err)
			}
			for n := 0; n < b.N; n++ {
				_, err := r.MarshalText()
				if err != nil {
					b.Fatalf("%v", err)
				}
			}
		})
	}
}

// Test the accumulation function more extensively
func TestEncodeMultSubnets(t *testing.T) {
	tc := [][]byte{
		[]byte("%ab,192.168.1.0/24,mn"),
		[]byte("%ac,10.1.0.0/16,mo"),
		[]byte(`%\000\022,2a03:6640::/32,c\000`),
		[]byte("%\\001\\001,0.0.0.0/0,c\\000"),
		[]byte(`%\000\002,::/0,c\000`),
		[]byte(`%\000\013,,i\000`),
	}
	targ := []MapRecord{
		{Key: []byte{0, 37, 109, 110, 192, 168, 1}, Value: []byte{97, 98}},
		{
			Key:   []byte{0, 37, 109, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 192, 168, 1, 0, 120},
			Value: []byte{97, 98},
		},
		{Key: []byte{0, 37, 109, 111, 10, 1}, Value: []byte{97, 99}},
		{
			Key:   []byte{0, 37, 109, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 10, 1, 0, 0, 112},
			Value: []byte{97, 99},
		},
		{
			Key:   []byte{0, 37, 99, 0, 42, 3, 102, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32},
			Value: []byte{0, 18},
		},
		{Key: []byte{0, 37, 99, 0}, Value: []byte{1, 1}},
		{
			Key:   []byte{0, 37, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 96},
			Value: []byte{1, 1},
		},
		{
			Key:   []byte{0, 37, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			Value: []byte{0, 2},
		},
		// %\000\013,,i\000
		{Key: []byte{0, 37, 105, 0}, Value: []byte{0, 11}},
		{
			Key:   []byte{0, 37, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 96},
			Value: []byte{0, 11},
		},
		// {0, '/'}: global prefix bitmap
		{Key: []byte{0, 47}, Value: []byte{120, 112, 96, 32, 0}},
		// {0, '4'}: ipv4 prefix bitmap (96 is equivalent to /0 in ipv4-mapped ipv6 address)
		{Key: []byte{0, 52}, Value: []byte{120, 112, 96}},
		// {0, '6'}: ipv6 prefix bitmap
		{Key: []byte{0, 54}, Value: []byte{32, 0}},
	}

	codec := new(Codec)
	out := []MapRecord{}
	for _, in := range tc {
		v, err := codec.ConvertLn(in)
		if err != nil {
			t.Fatalf("error converting %v: %v", string(in), err)
		}
		out = append(out, v...)
	}
	v, err := codec.Acc.MarshalMap()
	if err != nil {
		t.Fatalf("error encoding %v (opaque acc): %v", tc, err)
	}
	out = append(out, v...)
	if !reflect.DeepEqual(out, targ) {
		t.Fatalf("encoded differs: %v != %v", out, targ)
	}
}

func TestNoEncodeSubnets(t *testing.T) {
	tc := [][]byte{
		[]byte("%ab,192.168.1.0/24,mn"),
		[]byte(`%\000\022,2a03:6640::/32,c\000`),
		[]byte(`%\000\002,::/0,c\000`),
	}
	targ := []MapRecord{}

	codec := new(Codec)
	codec.NoRnetOutput = true
	codec.Acc.NoPrefixSets = true

	out := []MapRecord{}
	for _, in := range tc {
		v, err := codec.ConvertLn(in)
		if err != nil {
			t.Fatalf("error converting %v: %v", string(in), err)
		}
		out = append(out, v...)
	}
	v, err := codec.Acc.MarshalMap()
	if err != nil {
		t.Fatalf("error encoding %v (opaque acc): %v", tc, err)
	}
	out = append(out, v...)
	if !reflect.DeepEqual(out, targ) {
		t.Fatalf("encoded differs: %v != %v", out, targ)
	}
}

func TestLmapString(t *testing.T) {
	l := Lmap{97, 1}
	require.Equal(t, `\141\001`, l.String())
}

func TestParseIPNet(t *testing.T) {
	type testCase struct {
		input   string
		want    *net.IPNet
		wantErr bool
	}
	testCases := []testCase{
		{
			input: "192.168.1.0/24",
			want: &net.IPNet{
				IP:   net.IP{192, 168, 1, 0},
				Mask: net.CIDRMask(24, 32),
			},
		},
		{
			input:   "blah",
			want:    nil,
			wantErr: true,
		},
		{
			input: "",
			want: &net.IPNet{
				IP:   net.IPv4zero,
				Mask: net.CIDRMask(0, 32),
			},
		},
		{
			input: "192.168.1.3",
			want: &net.IPNet{
				IP:   net.IP{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 192, 168, 1, 3},
				Mask: net.CIDRMask(32, 32),
			},
		},
		{
			input: "2a03:6640::/32",
			want: &net.IPNet{
				IP:   net.IP{0x2a, 0x3, 0x66, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
				Mask: net.CIDRMask(32, 128),
			},
		},
	}
	for _, tc := range testCases {
		t.Run(tc.input, func(t *testing.T) {
			got, err := ParseIPNet(tc.input)
			if tc.wantErr {
				require.Error(t, err)
				return
			}
			require.NoError(t, err)
			require.Equal(t, tc.want, got)
		})
	}
}

// Benchmarks for various string conversion functions. To execute just them, run:
// % buck run //dns/fbdns/dnsdata:dnsdata_test-bench -- -test.bench BenchmarkAtoi
func BenchmarkAtoiFscan(b *testing.B) {
	var out uint32
	in := []byte("12345")
	for i := 0; i < b.N; i++ {
		_, _ = fmt.Fscan(bytes.NewBuffer(in), &out)
	}
}

func BenchmarkAtoiSscan(b *testing.B) {
	var out uint32
	in := []byte("12345")
	for i := 0; i < b.N; i++ {
		_, _ = fmt.Sscan(string(in), &out)
	}
}

func BenchmarkAtoiStrconv(b *testing.B) {
	var out uint32
	in := []byte("12345")
	for i := 0; i < b.N; i++ {
		if x, err := strconv.Atoi(string(in)); err == nil {
			out = uint32(x)
		}
	}
	_ = out
}

func BenchmarkAtoiStrconvUint(b *testing.B) {
	var out uint32
	in := []byte("12345")
	for i := 0; i < b.N; i++ {
		if x, err := strconv.ParseUint(string(in), 10, 32); err == nil {
			out = uint32(x)
		}
	}
	_ = out
}

func BenchmarkAtoiOur(b *testing.B) {
	var out uint32
	in := []byte("12345")
	for i := 0; i < b.N; i++ {
		getuint32(in, &out)
	}
	_ = out
}
